name: Go application build pipeline - repo-ci
on: 
  push:
    branches:
      - master

env:
  SKIP_SONAR: false
  ENVIRONMENT: dev

jobs:
  Install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Set up Go 1.22
        uses: actions/setup-go@v2
        with:
          go-version: 1.22

  Code_Scanning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for GitLeaks
        uses: gitleaks/gitleaks-action@v2
        with:
          TOKEN: ${{ secrets.TOKEN }}
          
      - name: SonarQube Scan
        if: ${{ env.SKIP_SONAR != 'true' }}
        uses: sonarsource/sonarqube-scan-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true

        
      - name: SonarQube Quality Gate check
        if: ${{ env.SKIP_SONAR != 'true' }}
        id: sonarqube-quality-gate-check
        uses: opsverseio/sonarqube-quality-gate-action@0.1.0
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
         SET_SONAR_PROJECT_STATUS: true
        continue-on-error: true


  Code_Build:
    runs-on: ubuntu-latest
    
    steps:

      - name: Checkout source code
        uses: actions/checkout@v4
    
      - name: Build Code
        run: |
          echo "Building the Go application..."
          pwd
          go build -o go-web-app

      - name: Run Tests
        run: |
          echo "Testing..."
          go test ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

  PushImage2Dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile
        continue-on-error: true
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push action
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/go-web-app:${{ env.ENVIRONMENT }}-${{ github.run_id }}

      - name: Integration Testing
        run: echo "Running integration tests..." 

  UpdateImageTag:
    runs-on: ubuntu-latest

    steps:
      - name: Configure Git user
        run: |
          git config --global user.email "pranavborude2000@gmail.com"
          git config --global user.name "Pranav Borude"
      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}  # Use the secret token to authenticate
      
      - name: Update Tag in GitOps
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          git clone https://github.com/pranavborude/go-web-app-gitops.git
          cd go-web-app-gitops/go-web-app-chart/
          sed -i.bak "s/tag: .*/tag: \"${{ env.ENVIRONMENT }}-${{ github.run_id }}\"/" ./values.yaml
          git commit -am "Update image tag"
          git push

      - name: Post Deployment Tests
        run: echo "Running post-deployment tests..."

      