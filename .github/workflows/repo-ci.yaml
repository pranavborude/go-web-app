name: Go application build pipeline - repo-ci
on: 
  push:
    branches:
      - master

env:
  SKIP_SONAR: false
  dev_env: dev
  uat_env: uat
  
  # Replace with your ArgoCD URL and application name
  ARGOCD_URL: "http://aadf0d623dab14626b531a6c682f4fea-237815234.ap-south-1.elb.amazonaws.com"
  APP_NAME: "go-web-app"

jobs:
  Install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go 1.22
        uses: actions/setup-go@v2
        with:
          go-version: 1.22

  Code_Scanning:
    runs-on: ubuntu-latest
    needs: Install

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for GitLeaks
        uses: gitleaks/gitleaks-action@v2
        with:
          TOKEN: ${{ secrets.TOKEN }}
          
      - name: SonarQube Scan
        if: ${{ env.SKIP_SONAR != 'true' }}
        uses: sonarsource/sonarqube-scan-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true
   
      - name: SonarQube Quality Gate check
        if: ${{ env.SKIP_SONAR != 'true' }}
        id: sonarqube-quality-gate-check
        uses: opsverseio/sonarqube-quality-gate-action@0.1.0
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
         SET_SONAR_PROJECT_STATUS: true
        continue-on-error: true


  Code_Build:
    runs-on: ubuntu-latest
    needs: Code_Scanning

    steps:

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Build Code
        run: |
          echo "Building the Go application..."
          pwd
          go build -o go-web-app

      - name: Run Tests
        run: |
          echo "Testing..."
          go test ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

  PushImage2Dockerhub:
    runs-on: ubuntu-latest
    needs: Code_Build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile
        continue-on-error: true
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push action
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/go-web-app:${{ env.dev_env }}-${{ github.sha }} # github.run_id -> github.sha (for tagging image using COMMIT_ID)

      # - name: Integration Testing
      #   run: echo "Running integration tests..." 

  UpdateImageTag:
    runs-on: ubuntu-latest
    needs: PushImage2Dockerhub

    steps:

      - name: Configure Git user
        run: |
          git config --global user.email "pranavborude2000@gmail.com"
          git config --global user.name "Pranav Borude"
      
      # - name: Checkout repository
      #   uses: actions/checkout@v3
      #   with:
      #     token: {{ secrets.TOKEN }}  # Use the secret token to authenticate
      
      - name: Update Tag in GitOps
        run: |
          git clone https://github.com/pranavborude/go-web-app-gitops.git
          cd go-web-app-gitops/go-web-app-chart/
          git config --global user.email "pranavborude2000@gmail.com"
          git config --global user.name "Pranav Borude"
          sed -i.bak "s/tag: .*/tag: \"${{ env.dev_env }}-${{ github.sha }}\"/" ./values-dev.yaml
          git commit -am "Update image tag"
          git push https://x-access-token:${{ secrets.TOKEN }}@github.com/pranavborude/go-web-app-gitops.git master
          
  CheckAppStatus:
    runs-on: ubuntu-latest
    needs: UpdateImageTag

    steps:

      - name: Fetch Application JSON
        env:  
          ARGOCD_URL: "http://aadf0d623dab14626b531a6c682f4fea-237815234.ap-south-1.elb.amazonaws.com"
          APP_NAME: "go-web-app"
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |

      - name: Login to obtain session
        run: |
          curl -s -L -k -X POST \
          -H "Authorization: Bearer $ARGOCD_AUTH_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
                "username": "admin",
                "password": "Pranav@123"
              }' \
          "$ARGOCD_URL/api/v1/session" \
          -c cookies.txt

      - name: Fetch application details
        run: |
          curl -s -L -k -X GET \
          -b cookies.txt \
          -H "Authorization: Bearer $ARGOCD_AUTH_TOKEN" \
          "$ARGOCD_URL/api/v1/applications/$APP_NAME" \
          -o api_response.json

          # Extract .status.health.status
          HEALTH_STATUS=$(jq -r '.status.health.status' api_response.json)
          
          # Export the value as an output variable
          echo "Health Status: $HEALTH_STATUS"

          # Check health status
          if [[ "$HEALTH_STATUS" == "Healthy" ]]; then
              echo "Application is healthy."
          else
              echo "Application health check failed!"
              exit 1
          fi    


  TagImageforUAT:
    runs-on: ubuntu-latest
    needs: CheckAppStatus

    steps:
      - name: Tag existing image with uat tag
        run: |
          docker pull pranav1562/$APP_NAME:${{ env.dev_env }}-${{ github.sha }}
          
          docker image tag pranav1562/$APP_NAME:${{ env.dev_env }}-${{ github.sha }} pranav1562/$APP_NAME:${{ env.uat_env }}-${{ github.sha }}
          
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push to Repository
        run: |
          docker push pranav1562/$APP_NAME:${{ env.uat_env }}-${{ github.sha }}

  ApprovalforUAT:
    runs-on: ubuntu-latest
    needs: TagImageforUAT

    steps:

      - name: Waiting for approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.TOKEN }}
          approvers: pranavborude
          minimum-approvals: 1
          issue-title: "Asking approval for UAT"
          # issue-body: "Please approve or deny the deployment of version v1.3.5."
          exclude-workflow-initiator-as-approver: false
          # additional-approved-words: ''
          # additional-denied-words: ''

  ChangetagforgitopsUAT:
    runs-on: ubuntu-latest
    needs: ApprovalforUAT

    steps:

      - name: Configure Git user
        run: |
          git config --global user.email "pranavborude2000@gmail.com"
          git config --global user.name "Pranav Borude"
      
      # - name: Checkout repository
      #   uses: actions/checkout@v3
      #   with:
      #     token: {{ secrets.TOKEN }}  # Use the secret token to authenticate
      
      - name: Update Tag in GitOps for uat
        run: |
          git clone https://github.com/pranavborude/go-web-app-gitops.git
          cd go-web-app-gitops/go-web-app-chart-uat/
          git config --global user.email "pranavborude2000@gmail.com"
          git config --global user.name "Pranav Borude"
          sed -i.bak "s/tag: .*/tag: \"${{ env.uat_env }}-${{ github.sha }}\"/" ./values-uat.yaml
          git commit -am "Update image tag"
          git push https://x-access-token:${{ secrets.TOKEN }}@github.com/pranavborude/go-web-app-gitops.git master
          
  CheckAppStatusforUAT:
    runs-on: ubuntu-latest
    needs: ChangetagforgitopsUAT

    steps:

      - name: Fetch Application JSON
        env:  
          ARGOCD_URL: "http://aadf0d623dab14626b531a6c682f4fea-237815234.ap-south-1.elb.amazonaws.com"
          # APP_NAME_UAT: "go-web-app-uat"
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |

      - name: Login to obtain session
        run: |
          curl -s -L -k -X POST \
          -H "Authorization: Bearer $ARGOCD_AUTH_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
                "username": "admin",
                "password": "Pranav@123"
              }' \
          "$ARGOCD_URL/api/v1/session" \
          -c cookies.txt

      - name: Fetch application details
        run: |
          curl -s -L -k -X GET \
          -b cookies.txt \
          -H "Authorization: Bearer $ARGOCD_AUTH_TOKEN" \
          "$ARGOCD_URL/api/v1/applications/go-web-app-uat" \
          -o api_response.json

          # Extract .status.health.status
          HEALTH_STATUS=$(jq -r '.status.health.status' api_response.json)
          
          # Export the value as an output variable
          echo "Health Status: $HEALTH_STATUS"

          # Check health status
          if [[ "$HEALTH_STATUS" == "Healthy" ]]; then
              echo "Application is healthy."
          else
              echo "Application health check failed!"
              exit 1
          fi    

      - name: Post Deployment Tests
        run: echo "Running post-deployment tests..."

      